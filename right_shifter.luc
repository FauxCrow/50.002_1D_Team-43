module right_shifter #(
    SIZE = 32: SIZE>0)(
    input a[SIZE], //input that will be shifted
    input b[5], //no. of bits we can shift up to(31)
    input pad, //introduce padding
    output shr[SIZE]
    
) {
    
    x_bit_right_shifter right_shift16(#SHIFT(16))
    x_bit_right_shifter right_shift8(#SHIFT(8))
    x_bit_right_shifter right_shift4(#SHIFT(4))
    x_bit_right_shifter right_shift2(#SHIFT(2))
    x_bit_right_shifter right_shift1(#SHIFT(1))
    
    always{
        right_shift16.pad = pad
        right_shift8.pad = pad
        right_shift4.pad = pad
        right_shift2.pad = pad
        right_shift1.pad = pad
        
        right_shift16.do_shift = b[4]
        right_shift8.do_shift = b[3]
        right_shift4.do_shift = b[2]
        right_shift2.do_shift = b[1]
        right_shift1.do_shift = b[0]
        
        //connect in cascade manner, such as 
        right_shift16.a = a;               //First stage takes the original input
        right_shift8.a = right_shift16.out; //second stage takes first stage output
        right_shift4.a = right_shift8.out;  //third stage takes second stage output
        right_shift2.a = right_shift4.out;  
        right_shift1.a = right_shift2.out;  

        //output is the result of the last stage
        shr = right_shift1.out;
        
    }
}
