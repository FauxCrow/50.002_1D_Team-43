module x_bit_left_shifter #(
    SIZE = 31 : SIZE > 0,
    SHIFT = 8 : SHIFT > -1 & SHIFT < SIZE
)(
    input a[SIZE],
    input do_shift,
    output out[SIZE]
) {
    // declare an array of SIZE instances of the mux_2 module
    mux_2 shift_unit[SIZE]
    sig shifted_pattern[SIZE]
    
    always {
        // Define each s0 in the array of mux_2 as do_shift using concatenation
        shift_unit.s0 = SIZEx{do_shift}
        
        //remaining pattern - fill vacated LSBs w zeros
        shifted_pattern = c{a[SIZE - 1 - SHIFT:0], SHIFTx{0}}  // Fill vacated bits with 0s
        
        repeat (i, SIZE){
            shift_unit.in[i] = shifted_pattern[i]
        }
        
        out = shift_unit.out
    }
}
