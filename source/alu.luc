module alu (
    input a[32],
    input b[32],
    input alufn[6],
    output out[32],
    output zvn[3]
) {
    const SIZE = 32

    sig z;
    sig v;
    sig n;
    
    adder adder(#SIZE(SIZE))
    multiplier multiplier(#SIZE(SIZE))
    
    shifter shifter(#SIZE(SIZE))
    // compare compare(#SIZE(SIZE))
    boolean boolean(#SIZE(SIZE))
    
    bm bitmask
    divider divider(#SIZE(SIZE))

    mux_4 alu_select_2[SIZE] // used for add / mul
    mux_4 alu_select_4[SIZE] // used for mux_2 select, compare, bool, shift
    
    always {
        // setup selector for mux_2
        alu_select_2.s0 = SIZEx{alufn[1]}
        
        // adder inputs
        adder.a = a
        adder.b = b
        adder.alufn = alufn

        // set signals based on adder overflow
        z = adder.z
        v = adder.v
        n = adder.n

        // set outputs zvn
        zvn[0] = z
        zvn[1] = v
        zvn[2] = n
        
        // multiplier inputs
        multiplier.a = a
        multiplier.b = b
        
        // add all selections add and multiply in mux_2 inputs based on operation table
        alu_select_2.in[0] = adder.out
        alu_select_2.in[1] = multiplier.mul
        
        // setup selector for mux_4
        alu_select_4.s1 = alufn[5]
        alu_select_4.s0 = alufn[4]
        
        // boolean inputs
        boolean.a = a
        boolean.b = b
        boolean.alufn = alufn
        
        // shifter inputs
        shifter.a = a
        shifter.b = b
        shifter.alufn = alufn
        
        // compare inputs - to be added, should have z v n
        
        // add all selections mux_2, boolean, shifter, compare as mux_4 in
	    alu_select_4.in[0] = alu_select_2.out
	    alu_select_4.in[1] = boolean.out
	    alu_select_4.in[2] = shifter.out
	    // compare to be added (alu_select_4.in[3])     

        // set out based on output of alu_select
        out = alu_select_4.out   

        // bit masking inputs
        bitmask.a = a
        bitmask.b = b
        bitmask.alufn = alufn

        // division inputs
        divider.a = a
        divider.b = b

        // special functionalities, replace out if fulfilled
        if (alufn == b000011){
            out = bitmask.masked
        }
        else if (alufn == b000100){
            out = divider.d
        } 
        
        // to be removed later, just for reference now
        //alu_output = adder.out
        //alu_output = c{31x{b0}, compare.cmp}
        //alu_output = boolean.bool
        //alu_output = shifter.shift
    }
}