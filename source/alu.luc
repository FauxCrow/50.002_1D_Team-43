module alu (
    input a[32],
    input b[32],
    input alufn[6],
    output out[32],
    output zvn[3]
) {
    const SIZE = 32
    
    sig out_sig[32]
    sig z
    sig v
    sig n
    
    // instantiate all control units
    adder adder(#SIZE(SIZE))
    bitmask bitmask
    compare compare
    boolean boolean
    shifter shifter
    
    
    always {        
        // adder inputs
        adder.a = a
        adder.b = b
        adder.alufn = alufn
        
        // set signals based on adder overflow
        z = adder.z
        v = adder.v
        n = adder.n
        
        // set outputs zvn
        zvn[0] = z
        zvn[1] = v
        zvn[2] = n
        
        // bitmask inputs
        bitmask.a = a
        bitmask.b = b
        bitmask.alufn = alufn[1:0]
        
        // compute 1 bit inputs
        compare.z = z
        compare.v = v
        compare.n = n
        compare.alufn = alufn
        
        // boolean inputs
        boolean.a = a
        boolean.b = b
        boolean.alufn = alufn
        
        // shifter inputs
        shifter.a = a
        shifter.b = b[4:0]
        shifter.alufn = alufn
        
        case(alufn){
            b000000: // ADD
                out_sig = adder.out
                z = adder.z
                v = adder.v
                n = adder.n
            b000001: // SUB
                out_sig = adder.out
                z = adder.z
                v = adder.v
                n = adder.n  
            b000100: 
                out_sig = bitmask.masked
            b011000: // BITWISE AND
                out_sig = boolean.bool
            b011110: // BITWISE OR 
                out_sig = boolean.bool
            b010110: // BITWISE XOR
                out_sig = boolean.bool
            b011010: // "A"
                out_sig = boolean.bool
            b100000: // SHL 
                out_sig = shifter.shift
            b100001: // SHR 
                out_sig = shifter.shift
            b100011: // SRA 
                out_sig = shifter.shift
            b110011: // CMPEQ 
                out_sig = c{31x{b0}, compare.cmp}
            b110101: // CMPLT 
                out_sig = c{31x{b0}, compare.cmp}
            b110111: // CMPLE
                out_sig = c{31x{b0}, compare.cmp}
            
            
            default:
                out_sig = 0
            
            
        }
        
        
        out = out_sig
        
        
        
    }
}