module alu (
    input a[32],
    input b[32],
    input alufn[6],
    output out[32],
    output z,
    output v,
    output n
) {
    const SIZE = 32
    
    adder adder(#SIZE(SIZE))
    multiplier multiplier
    bm bitmask
    shifter shifter(#SIZE(SIZE))
    // compare compare(#SIZE(SIZE))
    boolean boolean(#SIZE(SIZE))

    mux_4 alu_select_4[SIZE] // used for add / mul / bm
    mux_4 alu_select_4_main[SIZE] // used for mux_4 select, compare, bool, shift
    
    always {
        // setup selector for mux4
        alu_select_4.s0 = SIZEx{alufn[0]}
        alu_select_4.s1 = SIZEx{alufn[1]}
        
        // adder inputs
        adder.a = a
        adder.b = b
        adder.alufn = alufn
        
        // multiplier inputs
        multiplier.a = a
        multiplier.b = b
        
        // bit masking inputs
        bitmask.a = a
        bitmask.b = b
        bitmask.alufn = alufn
        
        // add all selections add, multiply as mux_2 in
        alu_select_4.in = {adder.out, multiplier.out, bitmask.out} // subtract to be added
        /* maybe?????????????
        
        repeat (i, SIZE){
            shift_unit.in[i] = c{shifted_pattern, SHIFTx{pad}}
        }*/
        
        // setup selector for mux4main
        alu_select_4_main.s1 = alufn[5]
        alu_select_4_main.s0 = alufn[4]
        
        // boolean inputs
        boolean.a = a
        boolean.b = b
        boolean.alufn = alufn
        
        // shifter inputs
        shifter.a = a
        shifter.b = b
        shifter.alufn = alufn
        
        // compare inputs
        
        // add all selections mux_2, boolean, shifter, compare as mux_4 in
        alu_select_4_main.in = {alu_select_4.out, boolean.out, shifter.out} // compare to be added 
        
        /*
        
        z = adder.z
        v = adder.v
        n = adder.n*/
        
        out = 0
        
        //alu_output = adder.out
        //alu_output = c{31x{b0}, compare.cmp}
        //alu_output = boolean.bool
        //alu_output = shifter.shift
    }
}