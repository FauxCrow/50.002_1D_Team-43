module regfiles (
    input clk,  // clock
    input rst,  // reset
    input wa[3], // write address
    input we, // write enable
    input data[32], // data in
    
    input ra1[3], // read address port 1
    input ra2[3], // read address port 2
    output rd1[32], // read data port 1
    output rd2[32], // read data port 1
    
    // states
    output ledmatrix_out[32], //for displaying whole ws128
    output currentlevel_out[32],  //current level(row) of player - if it reaches 0, end game
    output blocksnumber_out[32],  //number of blocks left (if reaches 0, gae ends)
    output bitmasktowerlevel_out[32] //level(row) of shifting blocks. should be +1 of current level
    //output counter_out[32]
    
) {
    .clk(clk){
        .rst(rst){
            dff ledmatrix[32](#INIT(0))
            dff currentlevel[32](#INIT(0))
            dff blocksnumber[32](#INIT(0))
            dff bitmasktowerlevel[32](#INIT(0))
           
        }
    }

    always {
        
        //write port
        if (we){
            case(wa){
                d0 : ledmatrix.d = data
                d1 : currentlevel.d = data
                d2 : blocksnumber.d = data
                d3 : bitmasktowerlevel.d = data
               
            }
        }
           
        //read port a
        case(ra1){
            d0 : rd1 = ledmatrix.q
            d1 : rd1 = currentlevel.q
            d2 : rd1 = blocksnumber.q
            d3 : rd1 = bitmasktowerlevel.q
            default : rd1 = 0
        }
        
        //read port b
        case(ra2){
            d0 : rd2 = ledmatrix.q
            d1 : rd2 = currentlevel.q
            d2 : rd2 = blocksnumber.q
            d3 : rd2 = bitmasktowerlevel.q
            default : rd2 = 0
        }

        ledmatrix_out = ledmatrix.q
        currentlevel_out = currentlevel.q
        blocksnumber_out = blocksnumber.q
        bitmasktowerlevel_out = bitmasktowerlevel.q
     
    }
}