module alu_tester_rom (
    input address[6],
    output a[32],
    output b[32],
    output alufn[6],
    output value[32]
) {
    // implement stored expected values for each test case for each operation
    const A_VALUE = {b00000000000000000000000000000001, b00000000000000000000000000000000, 
        b00000000000000000000000000000010, b00000000000000000000000000000010,
    
        b00000000000000000000000000100000, b10000000000000000000000000000000,
        b10000000000000000000000000000000,

        b00000000000000000000000000100001,b00000000000000000000000000100001,
        b10000000000000000000000000000001
    
    }
    const B_VALUE = {b00000000000000000000000000000000, b00000000000000000000000000000001, 
        b00000000000000000000000000000011, b00000000000000000000000000000010,
        
        b00000000000000000000000000000000, b00000000000000000000000000011111,
        b00000000000000000000000000000001,
        
        b00000000000000000000000000000000,b00000000000000000000000000011111,
        b00000000000000000000000000000001
              
    }
    
    const ALUFN_VALUE = {b000000, b000000, b000000, b000000,
        b100000,b100000,b100000,
        
        b100001,b100001,b100001}
    
    
    const EXPECTED_VALUE = {b00000000000000000000000000000001, b00000000000000000000000000000001, 
        b00000000000000000000000000000000, b00000000000000000000000000000000,
    
    
        b00000000000000000000000000100000,  b00000000000000000000000000000001,
        b00000000000000000000000000000000,
        
        b00000000000000000000000000100001, b00000000000000000000000000000000,
        b01000000000000000000000000000000

    }
    
    always {        
        case (address){
            b000000:
                a = A_VALUE[0]
                b = B_VALUE[0]
                alufn = ALUFN_VALUE[0]
                value = EXPECTED_VALUE[0]
            b000001:
                a = A_VALUE[1]
                b = B_VALUE[1]
                alufn = ALUFN_VALUE[1]
                value = EXPECTED_VALUE[1]
            b000010:
                a = A_VALUE[2]
                b = B_VALUE[2]
                alufn = ALUFN_VALUE[2]
                value = EXPECTED_VALUE[2]
            b000011:
                a = A_VALUE[3]
                b = B_VALUE[3]
                alufn = ALUFN_VALUE[3]
                value = EXPECTED_VALUE[3]
            
            b000100:
                a = A_VALUE[4]
                b = B_VALUE[4]
                alufn = ALUFN_VALUE[4]
                value = EXPECTED_VALUE[4]
            b000101:
                a = A_VALUE[5]
                b = B_VALUE[5]
                alufn = ALUFN_VALUE[5]
                value = EXPECTED_VALUE[5]
            b000110:
                a = A_VALUE[6]
                b = B_VALUE[6]
                alufn = ALUFN_VALUE[6]
                value = EXPECTED_VALUE[6]
            b000111:
                a = A_VALUE[7]
                b = B_VALUE[7]
                alufn = ALUFN_VALUE[7]
                value = EXPECTED_VALUE[7]
            b001000:
                a = A_VALUE[8]
                b = B_VALUE[8]
                alufn = ALUFN_VALUE[8]
                value = EXPECTED_VALUE[8]
            b001001:
                a = A_VALUE[9]
                b = B_VALUE[9]
                alufn = ALUFN_VALUE[9]
                value = EXPECTED_VALUE[9]
            
            default:
                a = 32x{0}
                b = 32x{0}
                alufn = 6x{0}
                value = 32x{0}
        }
    }
}
