module alu_tester_rom (
    input address[6],
    output a[32],
    output b[32],
    output alufn[6],
    output value[32]
) {
    // implement stored expected values for each test case for each operation
    
    const A_VALUE = {
        b00000000000000000000000000000001,  // ADD Test 1: A + 0 , adding 0
        b00000000000000000000000000000000,  // ADD Test 2: 0 + A , adding 0
        b00000000000000000000000000000101,  // ADD Test 3: 5 + 7 , adding positives
        b01111111111111111111111111111111,  // ADD Test 4: Boundary overflow, adding maximum numbers
        b00000000000000000000000000000010,  // SUB Test 5: A - 0 , Subtracting 0
        b00000000000000000000000000000000,   // SUB Test 6: 0 - A , Subtraction from 0
        b11111111111111111111111111111111,   // SUB Test 7: Underflow, Subtract larger from smaller
        b00000000000000000000000000000000,  // SUB Test 8: Boundary values, Subtract maximum positive from 0
        b00000000000000000000000000000000,  // MUL Test 9: 0 * 0 
        b00000000000000000000000000000010,  // MUL Test 10: 2 * 1
        b00000000000000000000000000000010, // MUL Test 11: 2 * 2 
        b00000000000000000000000000000101, // AND Test 12: 5 & 0
        b00000000000000000000000000000101, // AND Test 13: 5 & 5 
        b00000000000000000000000000000101, // AND Test 14: complement check
        b00000000000000000000000000000101, // OR Test 15: all 0s 
        b00000000000000000000000000000101 // OR Test 16: all 1s
        
    };

    const B_VALUE = {
        b00000000000000000000000000000000,  // ADD Test 1
        b00000000000000000000000000000001,  // ADD Test 2
        b00000000000000000000000000000111,  // ADD Test 3
        b01111111111111111111111111111111,  // ADD Test 4
        b00000000000000000000000000000000,  // SUB Test 5
        b00000000000000000000000000000010,   // SUB Test 6
        b01111111111111111111111111111111,   // SUB Test 7
        b01111111111111111111111111111111,    // SUB Test 8
        b00000000000000000000000000000000,  // MUL Test 9
        b00000000000000000000000000000001, // MUL Test 10
        b00000000000000000000000000000010, // MUL Test 11
        b00000000000000000000000000000000, // AND Test 12
        b00000000000000000000000000000101, // AND Test 13 
        b11111111111111111111111111111010, // AND Test 14
        b00000000000000000000000000000000, // OR Test 15
        b11111111111111111111111111111111 // OR Test 16 
        
    };

    const ALUFN_VALUE = {
        b000000,  // ADD
        b000000,  
        b000000,  
        b000000,  
        b000001,  // SUB
        b000001,   
        b000001,   
        b000001,  
        b000010, //  MUL
        b000010,
        b000010,
        b011000, //AND
        b011000, 
        b011000,
        b011110,
        b011110
    };

    const EXPECTED_VALUE = {
        b00000000000000000000000000000001,  // ADD Test 1 Result
        b00000000000000000000000000000001,  // ADD Test 2 Result
        b00000000000000000000000000001100,  // ADD Test 3 Result
        b11111111111111111111111111111110,  // ADD Test 4 Result
        b00000000000000000000000000000010,  // SUB Test 5 Result
        b11111111111111111111111111111110,   // SUB Test 6 Result, 0 - A (2's complement negative)
        b10000000000000000000000000000000,   // SUB Test 7 Result
        b10000000000000000000000000000000,   // SUB Test 8 Result
        b00000000000000000000000000000000,  // MUL Test 9 Result
        b00000000000000000000000000000001,  // MUL Test 10 Result
        b00000000000000000000000000000100, // MUL Test 11 Result
        b00000000000000000000000000000101, // AND Test 12 Result
        b00000000000000000000000000000101, // AND Test 13 Result
        b00000000000000000000000000000000, // AND Test 14 Result
        b00000000000000000000000000000101, // OR Test 15 Result
        b11111111111111111111111111111111 // OR Test 16 Result
    };
    
    always {        
        case (address){
            b000000:
                a = A_VALUE[0]
                b = B_VALUE[0]
                alufn = ALUFN_VALUE[0]
                value = EXPECTED_VALUE[0]
            b000001:
                a = A_VALUE[1]
                b = B_VALUE[1]
                alufn = ALUFN_VALUE[1]
                value = EXPECTED_VALUE[1]
            b000010:
                a = A_VALUE[2]
                b = B_VALUE[2]
                alufn = ALUFN_VALUE[2]
                value = EXPECTED_VALUE[2]
            b000011:
                a = A_VALUE[3]
                b = B_VALUE[3]
                alufn = ALUFN_VALUE[3]
                value = EXPECTED_VALUE[3]
            
            default:
                a = 32x{0}
                b = 32x{0}
                alufn = 6x{0}
                value = 32x{0}
        }
    }
}