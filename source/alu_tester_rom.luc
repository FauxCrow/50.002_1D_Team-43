module alu_tester_rom (
    input address[6],
    output a[32],
    output b[32],
    output alufn[6],
    output value[32]
) {
    // implement stored expected values for each test case for each operation
    
    const A_VALUE = {
        b00000000000000000000000000000001, // ADD Test 0: A + 0 , adding 0
        b00000000000000000000000000000000, // ADD Test 1: 0 + A , adding 0
        b00000000000000000000000000000101, // ADD Test 2: 5 + 7 , adding positives
        b01111111111111111111111111111111, // ADD Test 3: Boundary overflow, adding maximum numbers
        b00000000000000000000000000000010, // SUB Test 4: A - 0 , Subtracting 0
        b00000000000000000000000000000000, // SUB Test 5: 0 - A , Subtraction from 0
        b11111111111111111111111111111111, // SUB Test 6: Underflow, Subtract larger from smaller
        b00000000000000000000000000000000, // SUB Test 7: Boundary values, Subtract maximum positive from 0
        b00000000000000000000000000000000, // MUL Test 8: 0 * 0 
        b00000000000000000000000000000010, // MUL Test 9: 2 * 1
        b00000000000000000000000000000010, // MUL Test 10: 2 * 2 
        b00000000000000000000000000000101, // AND Test 11: 5 & 0
        b00000000000000000000000000000101, // AND Test 12: 5 & 5 
        b00000000000000000000000000000101, // AND Test 13: complement check
        b00000000000000000000000000000101, // OR Test 14: all 0s 
        b00000000000000000000000000000101, // OR Test 15: all 1s
        b00000000000000000000000000100000, // SHL Test 16: 0 shift
        b00000000000000000000000000000001, // SHL Test 17: max shift
        b10000000000000000000000000000000, // SHL Test 18: shift with 1 in MSB
        b00000000000000000000000000100001, // SHR Test 19: 0 shift
        b00000000000000000000000000100001, // SHR Test 20: max shift
        b10000000000000000000000000000001, // SHR Test 21: ensure vacated bits are filled with 0
        b00000000000000000000000000000101, // XOR Test 22: A XOR 0 
        b00000000000000000000000000000101, // XOR Test 23: A XOR A 
        b00000000000000000000000000000111, // CMPEQ Test 24: equal values
        b00000000000000000000000000000010, // CMPEQ Test 25: unequal values
        b00000000000000000000000000000010, // CMPLT Test 26: Less Than
        b00000000000000000000000000000111,  // CMPLT Test 27: Greater Than / Equal
        b00000000000000000000000000000010, // CMPLE Test 28: Less Than or Equal
        b00000000000000000000000000000111 // CMPLE Test 29: Greater Than
    }
    
    const B_VALUE = {
        b00000000000000000000000000000000, // ADD Test 0
        b00000000000000000000000000000001, // ADD Test 1
        b00000000000000000000000000000111, // ADD Test 2
        b01111111111111111111111111111111, // ADD Test 3
        b00000000000000000000000000000000, // SUB Test 4
        b00000000000000000000000000000010, // SUB Test 5
        b01111111111111111111111111111111, // SUB Test 6
        b01111111111111111111111111111111, // SUB Test 7
        b00000000000000000000000000000000, // MUL Test 8
        b00000000000000000000000000000001, // MUL Test 9
        b00000000000000000000000000000010, // MUL Test 10
        b00000000000000000000000000000000, // AND Test 11
        b00000000000000000000000000000101, // AND Test 12 
        b11111111111111111111111111111010, // AND Test 13
        b00000000000000000000000000000000, // OR Test 14
        b11111111111111111111111111111111, // OR Test 15 
        b00000000000000000000000000000000, // SHL Test 16 
        b00000000000000000000000000011111, // SHL Test 17 
        b00000000000000000000000000000001, // SHL Test 18 
        b00000000000000000000000000000000, // SHR Test 19 
        b00000000000000000000000000011111, // SHR Test 20 
        b00000000000000000000000000000001, // SHR Test 21 
        b00000000000000000000000000000000, // XOR Test 22
        b00000000000000000000000000000101, // XOR Test 23
        b00000000000000000000000000000111, // CMPEQ Test 24
        b00000000000000000000000000000111, // CMPEQ Test 25
        b00000000000000000000000000000111, //CMPLT Test 26
        b00000000000000000000000000000111,  //CMPLT Test 27
        b00000000000000000000000000000111, //CMPLT Test 28
        b00000000000000000000000000000010  //CMPLT Test 29
    }
    
    const ALUFN_VALUE = {
        b000000,  // ADD
        b000000,  
        b000000,  
        b000000,  
        b000001,  // SUB
        b000001,   
        b000001,   
        b000001,  
        b000010, //  MUL
        b000010,
        b000010,
        b011000, // AND
        b011000, 
        b011000,
        b011110, // OR
        b011110,
        b100000, // SHL
        b100000,
        b100000,
        b100001, // SHR
        b100001,
        b100001,
        b010110, // XOR
        b010110,
        b110011, //CMPEQ
        b110011,
        b110101, //CMPLT
        b110101,
        b110111, //CMPLE
        b110111
    }
    
    const EXPECTED_VALUE = {
        b00000000000000000000000000000001, // ADD Test 0 Result
        b00000000000000000000000000000001, // ADD Test 1 Result
        b00000000000000000000000000001100, // ADD Test 2 Result
        b11111111111111111111111111111110, // ADD Test 3 Result
        b00000000000000000000000000000010, // SUB Test 4 Result
        b11111111111111111111111111111110, // SUB Test 5 Result, 0 - A (2's complement negative)
        b10000000000000000000000000000000, // SUB Test 6 Result
        b10000000000000000000000000000001, // SUB Test 7 Result
        b00000000000000000000000000000000, // MUL Test 8 Result
        b00000000000000000000000000000010, // MUL Test 9 Result
        b00000000000000000000000000000100, // MUL Test 10 Result
        b00000000000000000000000000000000, // AND Test 11 Result
        b00000000000000000000000000000101, // AND Test 12 Result
        b00000000000000000000000000000000, // AND Test 13 Result
        b00000000000000000000000000000101, // OR Test 14 Result
        b11111111111111111111111111111111, // OR Test 15 Result
        b00000000000000000000000000100000, // SHL Test 16 Result
        b10000000000000000000000000000000, // SHL Test 17 Result
        b00000000000000000000000000000000, // SHL Test 18 Result
        b00000000000000000000000000100001, // SHR Test 19 Result
        b00000000000000000000000000000000, // SHR Test 20 Result
        b01000000000000000000000000000000, // SHR Test 21 Result
        b00000000000000000000000000000101, // XOR Test 22 Result
        b00000000000000000000000000000000, // XOR Test 23 Result
        b00000000000000000000000000000001, // CMPEQ Test 24 Result
        b00000000000000000000000000000000, // CMPEQ Test 25 Result
        b00000000000000000000000000000001, // CMPLT Test 26 Result
        b00000000000000000000000000000000, // CMPLT Test 27 Result
        b00000000000000000000000000000001, // CMPLE Test 28 Result
        b00000000000000000000000000000000  // CMPLE Test 29 Result
    }
    
    always {        
        case (address){
            b000000:
                a = A_VALUE[0]
                b = B_VALUE[0]
                alufn = ALUFN_VALUE[0]
                value = EXPECTED_VALUE[0]
            b000001:
                a = A_VALUE[1]
                b = B_VALUE[1]
                alufn = ALUFN_VALUE[1]
                value = EXPECTED_VALUE[1]
            b000010:
                a = A_VALUE[2]
                b = B_VALUE[2]
                alufn = ALUFN_VALUE[2]
                value = EXPECTED_VALUE[2]
            b000011:
                a = A_VALUE[3]
                b = B_VALUE[3]
                alufn = ALUFN_VALUE[3]
                value = EXPECTED_VALUE[3]
            b000100:
                a = A_VALUE[4]
                b = B_VALUE[4]
                alufn = ALUFN_VALUE[4]
                value = EXPECTED_VALUE[4]
            b0000101:
                a = A_VALUE[5]
                b = B_VALUE[5]
                alufn = ALUFN_VALUE[5]
                value = EXPECTED_VALUE[5]
            b000111:
                a = A_VALUE[6]
                b = B_VALUE[6]
                alufn = ALUFN_VALUE[6]
                value = EXPECTED_VALUE[6]
            b001000:
                a = A_VALUE[7]
                b = B_VALUE[7]
                alufn = ALUFN_VALUE[7]
                value = EXPECTED_VALUE[7]
            b001001:
                a = A_VALUE[8]
                b = B_VALUE[8]
                alufn = ALUFN_VALUE[8]
                value = EXPECTED_VALUE[8]
            b001010:
                a = A_VALUE[9]
                b = B_VALUE[9]
                alufn = ALUFN_VALUE[9]
                value = EXPECTED_VALUE[9]
            b001011:
                a = A_VALUE[10]
                b = B_VALUE[10]
                alufn = ALUFN_VALUE[10]
                value = EXPECTED_VALUE[10]
            b001100:
                a = A_VALUE[11]
                b = B_VALUE[11]
                alufn = ALUFN_VALUE[11]
                value = EXPECTED_VALUE[11]
            b001101:
                a = A_VALUE[12]
                b = B_VALUE[12]
                alufn = ALUFN_VALUE[12]
                value = EXPECTED_VALUE[12]
            b001110:
                a = A_VALUE[13]
                b = B_VALUE[13]
                alufn = ALUFN_VALUE[13]
                value = EXPECTED_VALUE[13]
            b001111:
                a = A_VALUE[14]
                b = B_VALUE[14]
                alufn = ALUFN_VALUE[14]
                value = EXPECTED_VALUE[14]
            b010000:
                a = A_VALUE[15]
                b = B_VALUE[15]
                alufn = ALUFN_VALUE[15]
                value = EXPECTED_VALUE[15]
            b010001:
                a = A_VALUE[16]
                b = B_VALUE[16]
                alufn = ALUFN_VALUE[16]
                value = EXPECTED_VALUE[16]
            b010010:
                a = A_VALUE[17]
                b = B_VALUE[17]
                alufn = ALUFN_VALUE[17]
                value = EXPECTED_VALUE[17]
            b010011:
                a = A_VALUE[18]
                b = B_VALUE[18]
                alufn = ALUFN_VALUE[18]
                value = EXPECTED_VALUE[18]
            b010100:
                a = A_VALUE[19]
                b = B_VALUE[19]
                alufn = ALUFN_VALUE[19]
                value = EXPECTED_VALUE[19]
            b010101:
                a = A_VALUE[20]
                b = B_VALUE[20]
                alufn = ALUFN_VALUE[20]
                value = EXPECTED_VALUE[20]
            b010111:
                a = A_VALUE[21]
                b = B_VALUE[21]
                alufn = ALUFN_VALUE[21]
                value = EXPECTED_VALUE[21]
            b011000:
                a = A_VALUE[22]
                b = B_VALUE[22]
                alufn = ALUFN_VALUE[22]
                value = EXPECTED_VALUE[22]
            b011001:
                a = A_VALUE[23]
                b = B_VALUE[23]
                alufn = ALUFN_VALUE[23]
                value = EXPECTED_VALUE[23]
            b011010:
                a = A_VALUE[24]
                b = B_VALUE[24]
                alufn = ALUFN_VALUE[24]
                value = EXPECTED_VALUE[24]
            b011011:
                a = A_VALUE[25]
                b = B_VALUE[25]
                alufn = ALUFN_VALUE[25]
                value = EXPECTED_VALUE[25]
            b011100:
                a = A_VALUE[26]
                b = B_VALUE[26]
                alufn = ALUFN_VALUE[26]
                value = EXPECTED_VALUE[26]
            b011101:
                a = A_VALUE[27]
                b = B_VALUE[27]
                alufn = ALUFN_VALUE[27]
                value = EXPECTED_VALUE[27]
            b011110:
                a = A_VALUE[28]
                b = B_VALUE[28]
                alufn = ALUFN_VALUE[28]
                value = EXPECTED_VALUE[28]
            b011111:
                a = A_VALUE[29]
                b = B_VALUE[29]
                alufn = ALUFN_VALUE[29]
                value = EXPECTED_VALUE[29]
            
            default:
                a = 32x{0}
                b = 32x{0}
                alufn = 6x{0}
                value = 32x{0}
        }
    }
}