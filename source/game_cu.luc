module game_cu (
    input clk,  // clock
    input rst,  // reset
    
    input shift_timer, // timer to indicate time to shift current row
    input regfile_datain[32], //direct reading of regfile data from read_address_b
    
    input p1_button,
    input p2_button,
    input reset_button,
    
    output alufn[6],
    output asel[3],
    output bsel[3],
    output alu_out_sel[2],
    output regfile_write_address[4],
    output regfile_read_address_a[4],
    output regfile_read_address_b[4],
    output we_regfile,
    output debug[4]
) {
    
    enum States {
        CLEAR_P1,
        SET_PREV_ROW_P1,
        SET_ROW_P1,
        CLEAR_P2,
        SET_PREV_ROW_P2,
        ADD_LEVEL,
        IDLE,
        
        CHECK_TURN,
        CHECK_P1_DIRECTION,
        CHECK_P2_DIRECTION,
        CHECK_RIGHT_END_P1,
        CHECK_LEFT_END_P1,
        CHANGE_RIGHT_LEFT_P1,
        CHANGE_LEFT_RIGHT_P1,
        CHECK_RIGHT_END_P2,
        CHECK_LEFT_END_P2,
        CHANGE_RIGHT_LEFT_P2,
        CHANGE_LEFT_RIGHT_P2,
        LEFT_SHIFT_P1,
        RIGHT_SHIFT_P1,
        LEFT_SHIFT_P2,
        RIGHT_SHIFT_P2,
        
        CHECK_BTN_TURN_P1,
        COMPARE_NEW_P1,
        BRANCH_NEW_P1,
        BITMASK_P1,
        CHECK_EMPTY_ROW_P1,
        BRANCH_EMPTY_P1,
        UPDATE_TURN_TO_P2,
        SET_ROW_P2,
        
        CHECK_BTN_TURN_P2,
        COMPARE_NEW_P2,
        BRANCH_NEW_P2,
        BITMASK_P2,
        CHECK_EMPTY_ROW_P2,
        BRANCH_EMPTY_P2,
        UPDATE_TURN_TO_P1,
        UPDATE_TOP,
        CHECK_TOP,
        CLEAR_PREV_P1,
        CLEAR_PREV_P2,
        UPDATE_PREV_P1,
        UPDATE_PREV_P2,
        CLEAR_CURRENT_P1,
        CLEAR_CURRENT_P2,
        
        P1_WIN, 
        P2_WIN,
        BOTH_WIN,
        GAME_OVER
    }
    
    .clk(clk){
        .rst(rst){
            dff game_fsm[$width(States)](#INIT(States.IDLE)) 
            dff state_delay[10](#INIT(0))
        }
    }
    
    always {
        // standard setting unless otherwise overwritten by each case 
        alufn = 0
        asel = 0 
        bsel = 0
        we_regfile = 0
        regfile_write_address = d0
        regfile_read_address_a = 0000
        regfile_read_address_b = 0000
        alu_out_sel = 0
        
        debug = b0000
        
        // connect dffs
        game_fsm.d = game_fsm.q
        state_delay.d = state_delay.q
        
        if (rst){
            game_fsm.d = States.IDLE
        }
        else{
            
            case(game_fsm.q){                
                States.IDLE:
                    if (shift_timer){
                        game_fsm.d = States.CHECK_TURN
                    }
                    else if (p1_button){
                        game_fsm.d = States.CHECK_BTN_TURN_P1
                    }
                    else if (p2_button){
                        game_fsm.d = States.CHECK_BTN_TURN_P2
                    }
                    else if (reset_button){                 // start game
                        game_fsm.d = States.CLEAR_P1
                    }
                
                // Setup circuit
                States.CLEAR_P1:                             // clear p1 attributes completely
                    alufn = b000001                            // subtract
                    asel = b00                                 // p1 attributes
                    bsel = b00                                 // p1 attributes  
                    we_regfile = 1 
                    regfile_write_address = d6               // write to p1 attributes
                    regfile_read_address_a = d6              // read from p1 attributes
                    regfile_read_address_b = d6              // read from p1 attributes            
                    
                    game_fsm.d = States.CLEAR_P2
                
                States.CLEAR_P2:                             // clear p2 attributes completely
                    alufn = b000001                            // subtract
                    asel = b00                                 // p2 attributes
                    bsel = b00                                 // p2 attributes  
                    we_regfile = 1 
                    regfile_write_address = d13               // write to p2 attributes
                    regfile_read_address_a = d13              // read from p2 attributes
                    regfile_read_address_b = d13              // read from p2 attributes           
                    
                    game_fsm.d = States.ADD_LEVEL
                
                States.ADD_LEVEL:                            // Start from level 1 (where level 0 is first set row)
                    alufn = b000000                            // add
                    asel = b00                                 // p1 attributes
                    bsel = b01                                 // + 1  
                    we_regfile = 1 
                    regfile_write_address = d4               // write to current level
                    regfile_read_address_a = d4              // read from current level               
                    
                    game_fsm.d = States.SET_PREV_ROW_P1
                
                States.SET_PREV_ROW_P1:                      // set p1 row 0 as '00111100'
                    alufn = b000000                            // add
                    asel = b00                                 // p1 attributes
                    bsel = b11                                 // + 60  
                    we_regfile = 1 
                    regfile_write_address = d1               // write to p1 prev row
                    regfile_read_address_a = d1              // read from p1 prev row
                    
                    game_fsm.d = States.SET_PREV_ROW_P2
                
                States.SET_PREV_ROW_P2:                      // set p2 row 0 as '00111100'
                    alufn = b000000                            // add
                    asel = b00                                 // p2 attributes
                    bsel = b11                                 // + 60  
                    we_regfile = 1 
                    regfile_write_address = d9               // write to p2 prev row
                    regfile_read_address_a = d9              // read from p2 prev row
                    
                    game_fsm.d = States.SET_ROW_P1
                
                States.SET_ROW_P1:                           // Set p1 current row as p1 previous row
                    alufn = b000000                            // add
                    asel = b00                                 // p1 attributes
                    bsel = b00                                 // p1 attributes  
                    we_regfile = 1 
                    regfile_write_address = d2               // write to p1 current row
                    regfile_read_address_a = d2              // read from p1 current row == 0
                    regfile_read_address_b = d1              // read from p1 prev row
                    
                    game_fsm.d = States.IDLE
                
                // slow clock activate
                States.CHECK_TURN:                           // Check whose turn it is currently
                    regfile_read_address_b = d12               // read from current turn
                    if (regfile_datain[0]){                    // if bit 0 (turn) is 1, it's player 2's turn
                        game_fsm.d = States.CHECK_P2_DIRECTION
                    }
                    else{                                       // if bit 0 (turn) is 0, it's player 1's turn
                        game_fsm.d = States.CHECK_P1_DIRECTION
                    }
                
                // Player 1 shift circuit
                States.CHECK_P1_DIRECTION:                   // Check p1's direction
                    regfile_read_address_b = d3                // read from p1 direction
                    if (regfile_datain[0]){                    // if bit 0 (direction) is 1, check right direction
                        game_fsm.d = States.CHECK_RIGHT_END_P1
                    }
                    else{                                       // if bit 0 (direction) is 0, check left direction
                        game_fsm.d = States.CHECK_LEFT_END_P1
                    }
                
                States.CHECK_RIGHT_END_P1:                   // Check p1 current row (if block reach right end)
                    regfile_read_address_b = d2                // read from p1 current row
                    if (regfile_datain[0]){                    // if bit 0 (rightmost bit) is 1, swap direction
                        game_fsm.d = States.CHANGE_RIGHT_LEFT_P1
                    }
                    else{                                      // if bit 0 (rightmost bit) is 0, continue right
                        game_fsm.d = States.RIGHT_SHIFT_P1
                    }
                
                States.CHANGE_RIGHT_LEFT_P1:                 // swap p1 direction from 1 (right) to 0 (left)
                    alufn = b000001                            // subtract
                    asel = b00                                 // p1 attributes
                    bsel = b01                                 // - 1  
                    we_regfile = 1 
                    regfile_write_address = d3               // write to p1 direction
                    regfile_read_address_a = d3              // read from p1 direction
                    
                    game_fsm.d = States.LEFT_SHIFT_P1
                
                States.CHECK_LEFT_END_P1:                 // Check p1 current row (if block reach left end)
                    regfile_read_address_b = d2                // read from p1 current row
                    if (regfile_datain[7]){                    // if bit 7 (leftmost bit) is 1, swap direction
                        game_fsm.d = States.CHANGE_LEFT_RIGHT_P1
                    }
                    else{                                      // if bit 7 (direction) is 0, continue left
                        game_fsm.d = States.LEFT_SHIFT_P1
                    }
                
                States.CHANGE_LEFT_RIGHT_P1:               // swap p1 direction from 0 (left) to 1 (right)
                    alufn = b000000                            // add
                    asel = b00                                 // p1 attributes
                    bsel = b01                                 // + 1  
                    we_regfile = 1 
                    regfile_write_address = d3               // write to p1 direction
                    regfile_read_address_a = d3              // read from p1 direction
                    
                    game_fsm.d = States.RIGHT_SHIFT_P1
                
                States.LEFT_SHIFT_P1:                        // 1 bit shift left to p1 current row
                    alufn = b100000                            // left shift
                    asel = b00                                 // p1 attributes
                    bsel = b01                                 // 1  
                    we_regfile = 1 
                    regfile_write_address = d2               // write to p1 current row
                    regfile_read_address_a = d2              // read from p1 current row
                    
                    game_fsm.d = States.IDLE
                
                States.RIGHT_SHIFT_P1:                       // 1 bit shift right to p1 current row
                    alufn = b100001                            // right shift
                    asel = b00                                 // p1 attributes
                    bsel = b01                                 // 1  
                    we_regfile = 1 
                    regfile_write_address = d2               // write to p1 current row
                    regfile_read_address_a = d2              // read from p1 current row
                    
                    game_fsm.d = States.IDLE
                
                // Player 2 shift circuit
                States.CHECK_P2_DIRECTION:                   // Check p2's direction 
                    regfile_read_address_b = d11               // read from p2 direction
                    if (regfile_datain[0]){                    // if bit 0 (direction) is 1, we're going right
                        game_fsm.d = States.CHECK_RIGHT_END_P2
                    }
                    else{                                       // if bit 0 (direction) is 0, we're going left
                        game_fsm.d = States.CHECK_LEFT_END_P2
                    }
                
                States.CHECK_RIGHT_END_P2:                   // Check p2 current row (if block reach right end)
                    regfile_read_address_b = d10               // read from p2 current row
                    if (regfile_datain[0]){                    // if bit 0 (rightmost bit) is 1, swap direction
                        game_fsm.d = States.CHANGE_RIGHT_LEFT_P2
                    }
                    else{                                      // if bit 0 (rightmost bit) is 0, continue right
                        game_fsm.d = States.RIGHT_SHIFT_P2
                    }
                
                States.CHANGE_RIGHT_LEFT_P2:                 // swap p2 direction from 1 (right) to 0 (left)
                    alufn = b000001                            // subtract
                    asel = b00                                 // p2 attributes
                    bsel = b01                                 // - 1  
                    we_regfile = 1 
                    regfile_write_address = d11               // write to p2 direction
                    regfile_read_address_a = d11              // read from p2 direction
                    
                    game_fsm.d = States.LEFT_SHIFT_P2
                
                States.CHECK_LEFT_END_P2:                   // Check p2 current row (if block reach left end)
                    regfile_read_address_b = d10               // read from p2 current row
                    if (regfile_datain[7]){                    // if bit 7 (leftmost bit) is 1, swap direction
                        game_fsm.d = States.CHANGE_LEFT_RIGHT_P2
                    }
                    else{                                      // if bit 7 (leftmost bit) is 0, continue left
                        game_fsm.d = States.LEFT_SHIFT_P2
                    }
                
                States.CHANGE_LEFT_RIGHT_P2:               // swap p2 direction from 0 (left) to 1 (right)
                    alufn = b000000                            // add
                    asel = b00                                 // p2 attributes
                    bsel = b01                                 // + 1  
                    we_regfile = 1 
                    regfile_write_address = d11               // write to p2 direction
                    regfile_read_address_a = d11              // read from p2 direction
                    
                    game_fsm.d = States.RIGHT_SHIFT_P2
                
                States.LEFT_SHIFT_P2:                        // 1 bit shift left to p2 current row
                    alufn = b100000                           // left shift
                    asel = b00                                 // p2 attributes
                    bsel = b01                                 // 1  
                    we_regfile = 1 
                    regfile_write_address = d10              // write to p2 current row
                    regfile_read_address_a = d10              // read from p2 current row
                    
                    game_fsm.d = States.IDLE
                
                States.RIGHT_SHIFT_P2:                       // 1 bit shift right to p2 current row
                    alufn = b100001                            // right shift
                    asel = b00                                 // p2 attributes
                    bsel = b01                                 // 1  
                    we_regfile = 1 
                    regfile_write_address = d10               // write to p2 current row
                    regfile_read_address_a = d10              // read from p2 current row
                    
                    game_fsm.d = States.IDLE
                
                // P1 compare circuit
                States.CHECK_BTN_TURN_P1:                    // Check if is currently p1's turn
                    regfile_read_address_b = d12               // read from turn
                    if (regfile_datain[0]){                    // if bit 0 (turn) is 1 (p2), back to idle
                        game_fsm.d = States.IDLE
                    }
                    else{                                       // if bit 0 (turn) is 0 (p1), continue
                        game_fsm.d = States.COMPARE_NEW_P1
                    }
                
                States.COMPARE_NEW_P1:                       // Compare if p1 prev row and current row identical
                    alufn = b110011                            // CMPEQ
                    asel = b00                                 // p1 attributes
                    bsel = b00                                 // p1 attributes  
                    we_regfile = 1
                    regfile_write_address = d5               // write to temp var
                    regfile_read_address_a = d1              // read from prev row
                    regfile_read_address_b = d2              // read from current row
                    
                    game_fsm.d = States.BRANCH_NEW_P1
                
                States.BRANCH_NEW_P1:                       // Branch based on comparison results
                    regfile_read_address_b = d5                // read from temp reg
                    if (regfile_datain[0]){                    // if bit 0 (temp) is 1 (same), skip bitmask
                        game_fsm.d = States.CHECK_EMPTY_ROW_P1
                    }
                    else{                                      // if bit 0 (temp) is 0 (different), bitmask
                        game_fsm.d = States.BITMASK_P1
                    }
                
                States.BITMASK_P1:                          // Keep overlap between p1 current and previous row
                    alufn = b000100                            // BM (AND)
                    asel = b00                                 // p1 attributes
                    bsel = b00                                 // p1 attributes  
                    we_regfile = 1
                    regfile_write_address = d2               // write to p1 current row
                    regfile_read_address_a = d1              // read from p1 prev row
                    regfile_read_address_b = d2              // read from p1 current row
                    
                    game_fsm.d = States.CHECK_EMPTY_ROW_P1
                
                States.CHECK_EMPTY_ROW_P1:                   // Check if p1 current row is now empty
                    alufn = b110011                            // CMPEQ
                    asel = b01                                 // 0
                    bsel = b00                                 // p1 attributes 
                    we_regfile = 1
                    regfile_write_address = d5               // write to temp var
                    regfile_read_address_b = d2              // read from p1 current row
                    
                    game_fsm.d = States.BRANCH_EMPTY_P1
                
                States.BRANCH_EMPTY_P1:                      // Branch based on empty check results
                    regfile_read_address_b = d5                // read from temp reg
                    if (regfile_datain[0]){                    // if bit 0 (temp) is 1 (prev = 0), end p1 loser
                        game_fsm.d = States.P2_WIN
                    }
                    else{                                       // if bit 0 (temp) is 0 (not 0), now p2 turn
                        game_fsm.d = States.UPDATE_TURN_TO_P2
                    }
                
                States.UPDATE_TURN_TO_P2:                    // Change p1 turn to p2 turn
                    alufn = b000000                            // add
                    asel = b00                                 // p2 attributes
                    bsel = b01                                 // + 1
                    we_regfile = 1 
                    regfile_write_address = d12               // write to turn
                    regfile_read_address_a = d12              // read from turn
                    
                    game_fsm.d = States.SET_ROW_P2
                
                States.SET_ROW_P2:                           // Set p2 current row as p2 previous row
                    alufn = b000000                            // add
                    asel = b00                                 // p2 attributes
                    bsel = b00                                 // p2 attributes  
                    we_regfile = 1 
                    regfile_write_address = d10              // write to p2 current row
                    regfile_read_address_a = d10             // read from p2 current row == 0
                    regfile_read_address_b = d9              // read from p2 prev row
                    
                    game_fsm.d = States.IDLE
                
                // P2 compare circuit
                States.CHECK_BTN_TURN_P2:                    // Check if is currently p2's turn
                    regfile_read_address_b = d12                // read from turn
                    if (regfile_datain[0]){                    // if bit 0 (turn) is 1, continue
                        game_fsm.d = States.COMPARE_NEW_P2
                    }
                    else{                                       // if bit 0 (turn) is 0, return to idle
                        game_fsm.d = States.IDLE
                    }
                
                States.COMPARE_NEW_P2:                       // Compare if p2 prev row and current row identical
                    alufn = b110011                           // CMPEQ
                    asel = b00                                 // p2 attributes
                    bsel = b00                                 // p2 attributes  
                    we_regfile = 1
                    regfile_write_address = d5                // write to temp var
                    regfile_read_address_a = d9               // read from p2 prev row
                    regfile_read_address_b = d10              // read from p2 current row
                    
                    game_fsm.d = States.BRANCH_NEW_P2
                
                States.BRANCH_NEW_P2:                         // Branch based on comparison results
                    regfile_read_address_b = d5                 // read from temp reg
                    if (regfile_datain[0]){                     // if bit 0 (temp) is 1 (same), skip bitmask
                        game_fsm.d = States.CHECK_EMPTY_ROW_P2
                    }
                    else{                                       // if bit 0 (temp) is 1 (different), we bitmask
                        game_fsm.d = States.BITMASK_P2
                    }
                
                States.BITMASK_P2:                          // Keep overlap between p2 current and previous row
                    alufn = b000100                           // BM (AND)
                    asel = b00                                // p2 attributes
                    bsel = b00                                // p2 attributes  
                    we_regfile = 1
                    regfile_write_address = d10               // write to p2 current row
                    regfile_read_address_a = d9               // read from p2 prev row
                    regfile_read_address_b = d10              // read from p2 current row
                    
                    game_fsm.d = States.CHECK_EMPTY_ROW_P2
                
                States.CHECK_EMPTY_ROW_P2:                   // Check if p2 current row is now empty
                    alufn = b110011                            // CMPEQ
                    asel = b01                                 // 0
                    bsel = b00                                 // p2 attributes 
                    we_regfile = 1
                    regfile_write_address = d5               // write to temp var
                    regfile_read_address_b = d10              // read from p2 current row
                    
                    game_fsm.d = States.BRANCH_EMPTY_P2
                
                States.BRANCH_EMPTY_P2:                      // Branch based on empty check results
                    regfile_read_address_b = d5                 // read from temp reg
                    if (regfile_datain[0]){                     // if bit 0 (temp) is 1, prev = 0, end p2 loser
                        game_fsm.d = States.P1_WIN
                    }
                    else{                                       // if bit 0 (direction) is 0, update top
                        game_fsm.d = States.UPDATE_TOP
                    }
                
                States.UPDATE_TOP:                           // Set to next level
                    alufn = b000000                            // ADD
                    asel = b00                                 // p1 attributes
                    bsel = b01                                 // + 1  
                    we_regfile = 1
                    regfile_write_address = d4               // write to current level
                    regfile_read_address_a = d4              // read from current level
                    
                    game_fsm.d = States.CHECK_TOP
                
                States.CHECK_TOP:                             // Check if has finished last level
                    regfile_read_address_b = d4                 // read from current level
                    if (regfile_datain[4:0] == b10000){         // if current level = 16, end winner 
                        game_fsm.d = States.BOTH_WIN
                    }
                    else{                                       // if not, setup for next level
                        game_fsm.d = States.CLEAR_PREV_P1
                    }
                
                States.CLEAR_PREV_P1:                        // clear p1 prev row completely
                    alufn = b000001                            // subtract
                    asel = b00                                 // p1 attributes
                    bsel = b00                                 // p1 attributes  
                    we_regfile = 1 
                    regfile_write_address = d1               // write to p1 prev row
                    regfile_read_address_a = d1              // read from p1 prev row
                    regfile_read_address_b = d1              // read from p1 prev row           
                    
                    game_fsm.d = States.CLEAR_PREV_P2
                
                States.CLEAR_PREV_P2:                        // clear p2 prev row completely
                    alufn = b000001                            // subtract
                    asel = b00                                 // p2 attributes
                    bsel = b00                                 // p2 attributes  
                    we_regfile = 1 
                    regfile_write_address = d9               // write to p2 prev row
                    regfile_read_address_a = d9              // read from p2 prev row
                    regfile_read_address_b = d9              // read from p2 prev row           
                    
                    game_fsm.d = States.UPDATE_PREV_P1
                
                States.UPDATE_PREV_P1:                       // set p1 prev row as p1 current row
                    alufn = b000000                            // add
                    asel = b00                                 // p1 attributes
                    bsel = b00                                 // p1 attributes  
                    we_regfile = 1 
                    regfile_write_address = d1               // write to p1 prev row
                    regfile_read_address_a = d1              // read from p1 prev row
                    regfile_read_address_b = d2              // read from p1 current row           
                    
                    game_fsm.d = States.UPDATE_PREV_P2
                
                States.UPDATE_PREV_P2:                       // set p2 prev row as p2 current row
                    alufn = b000000                            // add
                    asel = b00                                 // p2 attributes
                    bsel = b00                                 // p2 attributes  
                    we_regfile = 1 
                    regfile_write_address = d9               // write to p2 prev row
                    regfile_read_address_a = d9              // read from p2 prev row
                    regfile_read_address_b = d10              // read from p2 current row           
                    
                    game_fsm.d = States.CLEAR_CURRENT_P1
                
                States.CLEAR_CURRENT_P1:                     // reset p1 current row as 0
                    alufn = b000001                            // subtract
                    asel = b00                                 // p1 attributes
                    bsel = b00                                 // p1 attributes  
                    we_regfile = 1 
                    regfile_write_address = d2               // write to current row
                    regfile_read_address_a = d2              // read from current row
                    regfile_read_address_b = d2              // read from current row               
                    
                    game_fsm.d = States.CLEAR_CURRENT_P2
                
                States.CLEAR_CURRENT_P2:                     // reset p2 current row as 0
                    alufn = b000001                            // subtract
                    asel = b00                                 // p2 attributes
                    bsel = b00                                 // p2 attributes  
                    we_regfile = 1 
                    regfile_write_address = d10               // write to current row
                    regfile_read_address_a = d10              // read from current row
                    regfile_read_address_b = d10              // read from current row               
                    
                    game_fsm.d = States.UPDATE_TURN_TO_P1
                
                States.UPDATE_TURN_TO_P1:                    // Change p2 turn to p1 turn
                    alufn = b000001                            // sub
                    asel = b00                                 // p1 attributes
                    bsel = b01                                 // - 1
                    we_regfile = 1 
                    regfile_write_address = d12                // write to turn
                    regfile_read_address_a = d12               // read from turn
                    
                    game_fsm.d = States.SET_ROW_P1
                
                States.P1_WIN:
                    // alu_out_sel = b01           //P1 winning signal, code for when we have matrix
                    
                    alufn = b000000                            // add
                    asel = b00                                 // p1 attributes
                    bsel = b01                                 // + 1  
                    we_regfile = 1 
                    regfile_write_address = d7               // write to p1 win
                    regfile_read_address_a = d7              // read from current row
                    
                    game_fsm.d = States.GAME_OVER 
                
                States.P2_WIN:
                    //alu_out_sel = b10           //P1 losing signal, code for when we have matrix
                    
                    alufn = b000000                            // add
                    asel = b00                                 // p1 attributes
                    bsel = b01                                 // + 1  
                    we_regfile = 1 
                    regfile_write_address = d8               // write to p2 win 
                    regfile_read_address_a = d8              // read from current row
                    
                    game_fsm.d = States.GAME_OVER 
                
                States.BOTH_WIN:
                    alufn = b000000                            // add
                    asel = b00                                 // p1 attributes
                    bsel = b01                                 // + 1  
                    we_regfile = 1 
                    regfile_write_address = d14               // write to both win
                    regfile_read_address_a = d14              // read from current row
                    
                    game_fsm.d = States.GAME_OVER 
                
                States.GAME_OVER:                            // loops until reset button hit
                    if (reset_button) {
                        game_fsm.d = States.CLEAR_P1
                    } 
                    else {
                        game_fsm.d = States.GAME_OVER
                    }
            }
        } 
    }
}