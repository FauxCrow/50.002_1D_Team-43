//the regfile for all game information
module main_reg_files (
    input clk,  // clock
    input rst,  // reset
    input write_address[4], // write address
    input we, // write enable
    
    input data[32], // data in
    
    input read_address_a[4], //address port a 
    input read_address_b[4], //address port b
    output out_a[32], //read port a
    output out_b[32], //read port b
    
    //debug
    output timer[32],
    output level[5],
    output direction[1],
    output tiles[2],
    output row[8],
    output prev_row[8]
    //output counter_out[16]
    
) 

{
    .clk(clk){
        .rst(rst){
            dff p1_attributes[32](#INIT(0))
            //dff current_counter[32](#INIT(0));
            //dff temp_var[32](#INIT(0))
            dff current_timer[32](#INIT(0))
        }
    }
    
    always {
        
        //write port
        if (we){
            case(write_address){
                d0 : current_timer.d = data
                d1 : p1_attributes.d[31:24] = data[7:0] // write to prev row
                d2 : p1_attributes.d[23:16] = data[7:0] // write to current row
                d3 : p1_attributes.d[13] = data[0] // write to direction
                d4 : p1_attributes.d[4:0] = data[4:0] // write to current level
                d5 : p1_attributes.d[6:5] = data[6:5] // write to no. of tiles
            }
        }
        
        
        //read port a -- goes to beta asel mux, flush all values to end
        case(read_address_a){
            d0 : out_a = current_timer.q
            d1 : out_a = c{24x{0}, p1_attributes.q[31:24]} // prev row
            d2 : out_a = c{24x{0}, p1_attributes.q[23:16]} // current row
            d3 : out_a = c{31x{0}, p1_attributes.q[13]} // direction
            d4 : out_a = c{27x{0}, p1_attributes.q[4:0]} // level
            d5 : out_a = c{30x{0}, p1_attributes.q[6:5]} // no. of tiles
            default : out_a = 0
        }
        
        //read port b -- goes to beta bsel mux, flush all values to end
        case(read_address_b){
            d0 : out_b = current_timer.q
            d1 : out_b = c{24x{0}, p1_attributes.q[31:24]} // prev row
            d2 : out_b = c{24x{0}, p1_attributes.q[23:16]} // current row
            d3 : out_b = c{31x{0}, p1_attributes.q[13]} // direction
            d4 : out_b = c{27x{0}, p1_attributes.q[4:0]} // level
            d5 : out_b = c{30x{0}, p1_attributes.q[6:5]} // no. of tiles
            default : out_b = 0
        }
        
        //For debugging
        timer = current_timer.q
        
        // Attribute Address: [31:24] previous row, [23:16] current row, [13] direction, [6:5] tiles, [4:0] level
        prev_row = p1_attributes.q[31:24]
        row = p1_attributes.q[23:16]
        direction = p1_attributes.q[13]
        level = p1_attributes.q[4:0]
        tiles = p1_attributes.q[6:5]
        //counter_out = current_counter.q;
    }
}