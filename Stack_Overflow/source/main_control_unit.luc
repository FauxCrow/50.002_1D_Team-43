module main_control_unit (
    input clk,  // clock
    input rst,  // reset
    
    input shift_timer, // timer to indicate time to shift current row
    input regfile_datain[32], //direct reading of regfile data from read_address_b
    
    input p1_button,
    
    output alufn[6],
    output asel[3],
    output bsel[3],
    output alu_out_sel[2],
    output regfile_write_address[4],
    output regfile_read_address_a[4],
    output regfile_read_address_b[4],
    output we_regfile,
    output debug[4]
) {
    
    enum States {
        IDLE,
        TEST
    }
    
    .clk(clk){
        .rst(rst){
            dff game_fsm[$width(States)](#INIT(States.IDLE)) 
        }
    }
    
    always {
        // standard setting unless otherwise overwritten by each case 
        alufn = 0
        asel = 0 
        bsel = 0
        we_regfile = 0
        regfile_write_address = 1111
        regfile_read_address_a = 0000
        regfile_read_address_b = 0000
        alu_out_sel = 0
        
        debug = b0000
        
        // connect dffs
        game_fsm.d = game_fsm.q
        
        if (rst){
            game_fsm.d = States.IDLE
        }
        else{
            
            case(game_fsm.q){
                States.IDLE:
                    if (shift_timer){
                        game_fsm.d = States.TEST
                    }
                    else if (p1_button){
                        // do something
                    }
                
                States.TEST: 
                    alufn = b000000                            // Add
                    asel = b00                                 // p1 attributes
                    bsel = b01                                 // + 1  
                    we_regfile = 1 
                    regfile_write_address = b0010               // write to p1_attributes.d
                    regfile_read_address_a = b0010              // read from p1_attributes.d
                    
                    game_fsm.d = States.IDLE
            }
        } 
    }
}