module main_beta #(
    SLOW_CLOCK_DIV ~ 26 : SLOW_CLOCK_DIV > 0)
(
    input p1_button,
    //input p2_button,
    
    input clk,  // clock
    input rst,  // reset
    
    output debug_out[32],
    output p1_row[8],
    //output p2_out[16],
    output debug_slowclock
) {
    
    //temp variables
    sig inputAlu_a[32]
    sig inputAlu_b[32]
    
    alu game_alu
    
    .clk(clk){
        edge_detector game_timer_detector(#RISE(1), #FALL(0))
        
        .rst(rst){
            main_control_unit main_control_unit
            main_reg_files players
            
            counter slow_timer(#SIZE(1),#DIV(SLOW_CLOCK_DIV)) 
            
        }
    }
    always {
        
        //edge detectors
        game_timer_detector.in = slow_timer.value // shift timer detector
        
        //pass timer signals to CU unit 
        main_control_unit.shift_timer = game_timer_detector.out
        
        //pass button press signal to CU unit
        main_control_unit.p1_button = p1_button
        //main_control_unit.p2_button = p2_button;
        
        //Setup REGFILE unit 
        players.we = main_control_unit.we_regfile
        players.write_address = main_control_unit.regfile_write_address
        
        players.read_address_a = main_control_unit.regfile_read_address_a
        players.read_address_b = main_control_unit.regfile_read_address_b
        
        //bootstrap reg_b output to CU for convenient branching conditions
        main_control_unit.regfile_datain = players.out_b
        
        //asel mux
        case(main_control_unit.asel){
            b00  : inputAlu_a = players.out_a
            b01  : inputAlu_a = 28 // used to set from 00000000 to 00011100 
            b10  : inputAlu_a = 24 // used to set from 00000000 to 00011000
            b11  : inputAlu_a = 8 // used to set from 00000000 to 00001000
            
            default : //necessary to init
                inputAlu_a = 0
        }
        
        //bsel mux
        case(main_control_unit.bsel){
            b00 : inputAlu_b = players.out_b
            b01 : inputAlu_b = 1 // used to add / shift 1
            b10 : inputAlu_b = 0 // used to reset row to zero
            b11 : inputAlu_b = 60 // used to set from 00000000 to 00111100
            
            default : //necessary to init
                inputAlu_b = 0
        }
        
        //ALU
        game_alu.a = inputAlu_a
        game_alu.b = inputAlu_b
        game_alu.alufn = main_control_unit.alufn // take alufn from fsm
        
        //wdsel mux
        case (main_control_unit.alu_out_sel){
            b01 : players.data = b1111111111111111 // winning
            b10 : players.data = b0000000000001111 // losing
            b11 : players.data = 0 //draw
            default : //b00
                players.data = game_alu.out
        }
        
        //for debugging
        //  debug_out[3:0] = players.all_buttons;
        //  debug_out[7:4] = players.out;    
        //  debug_out = game_controlunit.debug;
        
        debug_out = players.timer
        //   debug_out = vc.debug;
        p1_row = players.row
        debug_slowclock = slow_timer.value
    }
}